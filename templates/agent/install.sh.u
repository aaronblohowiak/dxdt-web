#!/usr/bin/env bash

##############################################################################
#
#              _______                     _______                
#              \  ___ `'.                  \  ___ `'.             
#               ' |--.\  \                  ' |--.\  \            
#               | |    \  '                 | |    \  '      .|   
#               | |     |  ' ____     _____ | |     |  '   .' |_  
#               | |     |  |`.   \  .'    / | |     |  | .'     | 
#               | |     ' .'  `.  `'    .'  | |     ' .''--.  .-' 
#               | |___.' /'     '.    .'    | |___.' /'    |  |   
#              /_______.'/      .'     `.  /_______.'/     |  |   
#              \_______|/     .'  .'`.   `.\_______|/      |  '.
#                           .'   /    `.   `.              |   /  
#                          '----'       '----'             `'-'  
#
#
##############################################################################
#
#
#   https://dxdt.io Server Monitoring
#   This software is provided with NO WARRANTY,  express or implied.
#   While we believe that it is a fine piece of code, we make no garauntees.
#   It might destroy your computer, or launch nukes at the USSR.
# 
#   By using this software, you agree to the terms and conditions at
#     https://dxdt.io/terms
#
#
##############################################################################

##############################################################################
#  Overview
##############################################################################
#
#  This script does a few things:
#  
#    1. Check for all pre-requisite commands (grep, tar, lsof, ifconfig...)
#    2. Create folder structure
#    3. Install files into the appropriate location
#    4. Report progress to dxdt
#    5. Launch the stats collecting agent (dxdt-collectd)
#
#  If you have any questions about how this works, email questions@dxdt.io
#
##############################################################################

##############################################################################
# Environment Variables (Options)
##############################################################################
#
# Set DXDT_MACHINE_ID to a unique url-safe string for each computer
#  or to override default.
#  Note: we use this to connect data to the machine, so if you change it,
#  You will be creating a new machine!
#
# Set DXDT_BASE_DIR to the folder that you want DXDT to use as its root.
#   by default it is /opt/dxdt
#
# Note that we still put the conf in /etc/dxdt.conf
#
##############################################################################

##############################################################################
# Begin critical section; exit if any line returns anything non 0
##############################################################################
set -e
##############################################################################

# This should never change unless you are a dxdt developer :)
DXDT_ENDPOINT="<%= endpoint %>";

# This is your account API Key.  It is not a secret.
DXDT_API_KEY="<%= apiKey %>";

#Tokens grant acess to a specific environment for a given account.
#  Every time you download the install.sh script, we generate a new token for you
#  this lets you revoke tokens in a fine-grained way.
#  The tokens created have read+write access, but not GRANT access.
DXDT_TOKEN="<%= token %>";

# Machine id MUST be unique per account.  A unique one is generated on download
#  OR use the env var DXDT_MACHINE_ID if you want to override it.
#    
#  If you are going to re-use the install script you have downloaded, you MUST
#    specify a new DXDT_MACHINE_ID for each new machine.

if test "$DXDT_MACHINE_ID"
then DXDT_MACHINE_ID="$DXDT_MACHINE_ID"; #noop, but useful for readability.
else
 DXDT_MACHINE_ID="<%= machineId %>" ;
fi

if test "$DXDT_BASE_DIR"
then DXDT_BASE_DIR="$DXDT_BASE_DIR";
else DXDT_BASE_DIR="/opt/dxdt";
fi

##############################################################################
#  Read or Write Config File.
##############################################################################

if [ -f /etc/dxdt-collectd.conf ]
then source /etc/dxdt-collectd.conf;
else 
(
cat<<EOF
#!/usr/bin/env bash
export DXDT_ENDPOINT="$DXDT_ENDPOINT"
export DXDT_API_KEY="$DXDT_API_KEY"
export DXDT_TOKEN="$DXDT_TOKEN"
export DXDT_MACHINE_ID="$DXDT_MACHINE_ID"
export DXDT_BASE_DIR="$DXDT_BASE_DIR"
EOF
)> /etc/dxdt-collectd.conf
fi

if [ -f /etc/dxdt-collectd.conf ]
then true;
else
  echo "Could not write /etc/dxdt-collectd.conf. Are you running as root?"
  exit
fi
echo This machine has the id: $DXDT_MACHINE_ID

##############################################################################

function failedInstall {
  echo $1
  #TODO: include PATH
  code=`curl -d "machineid=$DXDT_MACHINE_ID" -d "failure=$1" --user "$DXDT_API_KEY:$DXDT_TOKEN" --write-out %{http_code} --silent --output /dev/null $DXDT_ENDPOINT/install-failed`;
}

##############################################################################
#  Capability Checks
##############################################################################

function testCommand {
  if command -v $1 &>/dev/null;
    then true;
    else failedInstall "Please install $1 and make sure it is in the PATH.";
  fi
  return 0
}

for command in date rm time tar grep uptime lsof df ifconfig mkdir
do
  testCommand $command
done

#md5 is special because it is sometimes called md5sum. grrrr. 
if command -v md5 &>/dev/null; 
  then true;
  else
    if command -v md5sum &>/dev/null
    then true;
    else failedInstall "Please install md5 or md5sum and make sure it is in the PATH.";
    fi
fi

##############################################################################
#  Create directories
##############################################################################

#TODO: Report failure if it should occur.
mkdir -p $DXDT_BASE_DIR

# we want to be able to execute it to set up our environment
chmod +rx /etc/dxdt-collectd.conf

##############################################################################
#  Write dxdt-collectd.sh File
##############################################################################

(
cat<<"DXDT-COLLECTOR-SOURCE"
    #!/usr/bin/env bash

    if [ -f /etc/dxdt-collectd.conf ]
    then source /etc/dxdt-collectd.conf;
    else 
      echo "You MUST have an /etc/dxdt-collectd.conf that contains the DXDT_* environment variables.";
      exit;
    fi

    ###############################################################
    # Begin critical section; exit if any line returns anything bad
    ###############################################################
    set -e
    ###############################################################

    if [ -n "$1" ]
    then infodir="$1";
    else
      mkdir -p /tmp/dxdt/
      infodir="/tmp/dxdt/stats_`date +%s`"; 
    fi

    process_dir="$infodir/processes"
    sys_dir="$infodir/sys"

    mkdir -p $infodir
    mkdir $process_dir
    mkdir $sys_dir


    if command -v md5 &>/dev/null; 
      then hshcommand="md5"; #BSD
      else hshcommand="md5sum"; #LINUX
    fi

    if command -v vm_stat &>/dev/null;
      then  vmcommand="vm_stat"; #OSX/BSD 
      else  vmcommand="vmstat"; #LINUX
    fi

    function runAndRecordWithTime {
      # command directory basename
      /usr/bin/time -p bash -c "$1 1>$2/$3.stdout.txt 2>$2/$3.stderr.txt" 2> $2/$3.time.txt;
    }

    function runAndRecord {
      # command directory basename
      $1 > "$2/$3.stdout.txt" 2> "$2/$3.stderr.txt";
    }

    function log {
      # command directory
      runAndRecord "$1" "$2" "$1"
    }

    # Process monitoring functions
    function runAndRecordProcess {
      # command basename
      runAndRecord "$1" "$process_dir" "$2"
    }

    # Utility function to get info about all the processes on the machine
    pslist="ps -A -o pid -o"
    function getInfo {
      # ps format string
      runAndRecordProcess "$pslist $1" $1
    }

    function getInfoPercent {
      runAndRecordProcess "$pslist %$1" $1
    }

    ###############################################################
    # END critical section; exit if any line returns anything bad
    ###############################################################
    set +e
    ###############################################################

    getInfo lstart #Full start time
    getInfo ucomm # simple name

    getInfo args # full command name with args (unless ps is in "safe mode")

    getInfo rss # resident size in Kbytes
    getInfo vsz # resident size in Kbytes
    getInfo utime # user CPU time
    getInfo time # user + system CPU time

    getInfoPercent cpu
    getInfoPercent mem

    #System-wide performance
    log $vmcommand "$sys_dir"
    log uptime "$sys_dir"
    runAndRecordWithTime "df -k" "$sys_dir" df

    runAndRecord "date +%s" "$sys_dir" date
    runAndRecord "lsof -iTCP -sTCP:LISTEN -P -Fpn" "$sys_dir" lsoftcp

    ###############################################################
    # Begin critical section; exit if any line returns anything bad
    ###############################################################
    set -e
    ###############################################################

    #Network info
    log "hostname" "$sys_dir"
    runAndRecord "ifconfig -a" "$sys_dir" ifconfig

    echo "$DXDT_MACHINE_ID" > $infodir/machineid;

    outputfilename="$infodir.tgz"
    tar -czf "$outputfilename" $infodir/
    rm -rf $infodir/

    ###############################################################
    # Begin uploading. Will attempt to upload all .tgz files in dir
    ###############################################################
    for filename in *.tgz; do
      set +e

      code=`curl -F "bulk=@$filename" --user "$DXDT_API_KEY:$DXDT_TOKEN" --write-out %{http_code} --silent --output /dev/null $DXDT_ENDPOINT`;
      set -e

      echo $code

      if [ "$code" == "200" ]; then
        `rm $filename`;
      else
        echo "upload of $filename failed, will not delete.";
      fi
    done

DXDT-COLLECTOR-SOURCE
)> /opt/dxdt/dxdt-collector.sh

(
cat<<"DXDT-COLLECTD-SOURCE"
#!/usr/bin/env bash

while true
do 
bash /opt/dxdt/dxdt-collector.sh
sleep 30
done
DXDT-COLLECTD-SOURCE
)> /opt/dxdt/dxdt-collectd.sh

chmod +x /opt/dxdt/dxdt-collectd.sh

# Report Progress.
#TODO: report progress!

# Start dxdt-collectd.sh in background.
bash /opt/dxdt/dxdt-collectd.sh & disown


